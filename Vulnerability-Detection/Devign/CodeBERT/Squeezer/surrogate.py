import json
import numpy
import numpy as np
from sklearn import preprocessing
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF

class Kriging():

    def __init__(self, cluster = None):
            self.create_model_from_cluster(cluster)

    def create_model_from_cluster(self,cluster):
        self.scaler = preprocessing.StandardScaler()
        cluster = np.array(cluster)
        X = cluster[:, 0:5] # features from 0 to 15th index
        y = cluster[:, 5] # value at 16th index
        X = self.scaler.fit_transform(X)
        kernel = 1.0 * RBF(1.0)  # squared-exponential kernel
        self.model = GaussianProcessRegressor(kernel=kernel, random_state=0).fit(X, y)


    def test(self, cluster):
        mae = 0
        for i in range(len(cluster)):
            y_act = cluster[i][5]
            Y_pred = self.predict(cluster[i][:5])
            mae = mae + abs(y_act - Y_pred)
        self.mae = mae/len(cluster)
    
    def predict(self, value):
        value = numpy.array([value])
        B = np.reshape(value, (1, 5))
        B = (self.scaler.transform(B))
        y_pred = self.model.predict(B)

        return  y_pred

if __name__ == "__main__":
    data = []
    with open("surrogate_acc.jsonl") as f:
        for line in f:
            data.append(json.loads(line.strip()))
    
    cluster = []

    for d in data:
        temp = []
        for c in d.values():
            temp.append(c)
        cluster.append(temp)

    pre = Kriging(cluster)

    pre.test(cluster)

    print(pre.predict([45000, 8, 16, 496, 1]))
