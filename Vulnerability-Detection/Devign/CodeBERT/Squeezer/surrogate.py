import json
import time
import random

import numpy as np
from tqdm import tqdm
from sklearn import preprocessing
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF

from scipy.stats import mannwhitneyu


from Kriging import Kriging
from RBF import Model
from PR import Polynomial_Regression
from ensemble_max import ensemble as ensemble_max
from ensemble_weight import ensemble as ensemble_weight

def train_test_spilt(cluster, train_percentage):
    random.shuffle(cluster)
    train = []
    test = []
    test_percentage = 100 - train_percentage
    for i in range(int(((len(cluster) * train_percentage) / 100))):
        train.append(cluster[i])

    total = 0
    for i in range(int(((len(cluster) * train_percentage) / 100)),
                   int(((len(cluster) * train_percentage) / 100)) + 1 + int(((len(cluster) * test_percentage) / 100))):

        if i <len(cluster):
            test.append(cluster[i])
    return train, test

if __name__ == "__main__":
    data = []
    with open("surrogate_acc.jsonl") as f:
        for line in f:
            data.append(json.loads(line.strip()))
    
    cluster = []

    for d in data:
        temp = []
        for c in d.values():
            temp.append(c)
        cluster.append(temp)
    
    mse_kr = []
    mse_pr = []
    mse_rbf = []
    mse_em = []
    mse_ew = []
    mae_kr = []
    mae_pr = []
    mae_rbf = []
    mae_em = []
    mae_ew = []
    time_kr = []
    time_pr = []
    time_rbf = []
    time_em = []
    time_ew = []
    for i in tqdm(range(20)):
        train, test = train_test_spilt(cluster, 80)

        kr = Kriging(train)
        start = time.time()
        kr.test(test)
        time_kr.append((time.time()-start)/10)
        mse_kr.append(kr.mse)
        mae_kr.append(kr.mae)

        pr = Polynomial_Regression(cluster=train)
        start = time.time()
        pr.test(test)
        time_pr.append((time.time()-start)/10)
        mse_pr.append(pr.mse)
        mae_pr.append(pr.mae)

        rbf = Model(10, train)
        start = time.time()
        rbf.test(test)
        time_rbf.append((time.time()-start)/10)
        mse_rbf.append(rbf.mse)
        mae_rbf.append(rbf.mae)

        em = ensemble_max(train)
        start = time.time()
        em.test(test)
        time_em.append((time.time()-start)/10)
        mse_em.append(em.mse)
        mae_em.append(em.mae)

        ew = ensemble_weight(train)
        start = time.time()
        ew.test(test)
        time_ew.append((time.time()-start)/10)
        mse_ew.append(ew.mse)
        mae_ew.append(ew.mae)
    
    with open("surrogate_pred_errors_.jsonl", "w") as f:
        f.write(json.dumps({"mse": str(mse_kr), "mae": str(mae_kr), "time": str(time_kr)}) + "\n")
        f.write(json.dumps({"mse": str(mse_pr), "mae": str(mae_pr), "time": str(time_pr)}) + "\n")
        f.write(json.dumps({"mse": str(mse_rbf), "mae": str(mae_rbf), "time": str(time_rbf)}) + "\n")
        f.write(json.dumps({"mse": str(mse_em), "mae": str(mae_em), "time": str(time_em)}) + "\n")
        f.write(json.dumps({"mse": str(mse_ew), "mae": str(mae_ew), "time": str(time_ew)}) + "\n")

    # U1, p = mannwhitneyu(mae1, mae2, method="asymptotic")
    # print(p)