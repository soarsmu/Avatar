# -*- coding: utf-8 -*-
import json
import random
from RBF import Model as RBF_Model
from PR import Polynomial_Regression
from Kriging import *
# from util import train_test_spilt
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF
import copy

def train_test_spilt(cluster, train_percentage):
    random.shuffle(cluster)
    train = []
    test = []
    test_percentage = 100 - train_percentage
    for i in range(int(((len(cluster) * train_percentage) / 100))):
        train.append(cluster[i])

    total = 0
    for i in range(int(((len(cluster) * train_percentage) / 100)),
                   int(((len(cluster) * train_percentage) / 100)) + 1 + int(((len(cluster) * test_percentage) / 100))):

        if i <len(cluster):
            test.append(cluster[i])
    return train, test

class ensemble:
    def __init__(self,database,deg=2):
        # self.objective = obj

        train, test = train_test_spilt(database,80)
        self.rbf = RBF_Model(10, train)
        self.PR = Polynomial_Regression(degree=deg, cluster = train)
        self.KR = Kriging(train)

        self.rbf.test(test)
        self.PR.test(test)
        self.KR.test(test)



        total_mae = self.rbf.mae + self.PR.mae + self.KR.mae
        self.w_rbf = 0.5 * ((total_mae - self.rbf.mae)/total_mae)
        self.w_PR = 0.5 * ((total_mae - self.PR.mae) / total_mae)
        self.w_KR = 0.5 * ((total_mae - self.KR.mae) / total_mae)




    def predict(self,fv):
        fv = fv[:5]
        # fv = [0, 1, 0, 0, 0, 0, 1, 1, 1, 2, 3, 1, 4, 1, 1, 1]
        # print(fv)
        y_rbf = self.rbf.predict(copy.deepcopy(fv))
        y_pr = self.PR.predict(copy.deepcopy(fv))
        y_kr = self.KR.predict(copy.deepcopy(fv))


        # diff_rbf_pr = abs(y_rbf - y_pr)
        # diff_rbf_kr = abs(y_rbf - y_kr)
        # diff_pr_kr = abs(y_pr - y_kr)

        # print(y_pr)
        # print((y_rbf*self.w_rbf) + (y_pr*self.w_PR) + (y_kr*self.w_KR))

        
        # print(diff_pr_kr,diff_rbf_kr,diff_rbf_pr)
        

        return max([y_rbf,y_pr,y_kr])

    def test(self, cluster):
        y_preds = []
        mae = 0
        mse = 0
        for i in range(len(cluster)):
            y_act = cluster[i][5]
            Y_pred = self.predict(cluster[i][:5])
            y_preds.append(Y_pred)
            mae = mae + abs(y_act - Y_pred)
            mse = mse + abs(y_act - Y_pred)**2
        self.mae = mae/len(cluster)
        self.mse = mse/len(cluster)
        # return (self.mae, self.mse)
# data = []
# with open("surrogate_acc.jsonl") as f:
#     for line in f:
#         data.append(json.loads(line.strip()))

# cluster = []

# for d in data:
#     temp = []
#     for c in d.values():
#         temp.append(c)
#     cluster.append(temp)

# pre = ensemble(cluster)

# # pre.test(cluster)

# print(pre.predict([45000, 8, 16, 496, 1]))