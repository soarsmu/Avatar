# -*- coding: utf-8 -*-
"""
"""
import json
import numpy
import numpy as np

from sklearn import preprocessing


class Polynomial_Regression:

    def __init__(self, degree=2, index =-1,filename='',cluster = None):

        self.create_model_from_cluster(cluster,degree)


    def create_model_from_cluster(self,cluster,deg):
        self.scaler = preprocessing.StandardScaler()
        cluster = np.array(cluster)

        X = cluster[:, 0:5] # features from 0 to 15th index
        y = cluster[:, 5] # value at 16th index


        X = self.scaler.fit_transform(X)
        from sklearn.linear_model import LinearRegression
        from sklearn.preprocessing import PolynomialFeatures
        self.poly_reg = PolynomialFeatures(degree=deg)
        X_poly = self.poly_reg.fit_transform(X)
        self.pol_reg = LinearRegression()
        self.pol_reg.fit(X_poly, y)

    def test(self, cluster):
        y_preds = []
        mae = 0
        mse = 0
        for i in range(len(cluster)):
            y_act = cluster[i][5]
            Y_pred = self.predict(cluster[i][:5])
            y_preds.append(Y_pred)
            mae = mae + abs(y_act - Y_pred)
            mse = mse + abs(y_act - Y_pred)**2
        self.mae = mae/len(cluster)
        self.mse = mse/len(cluster)
        # return (self.mae, self.mse)
        

    # def train(self, deg,index,filename):
    #     self.scaler = preprocessing.StandardScaler()
    #     dataset = pd.read_csv(filename)
    #     X = dataset.iloc[:, 0:5].values
    #     y = dataset.iloc[:, index:index+1].values
    #     X = self.scaler.fit_transform(X)

    #     from sklearn.linear_model import LinearRegression
    #     from sklearn.preprocessing import PolynomialFeatures
    #     self.poly_reg = PolynomialFeatures(degree=deg)
    #     X_poly = self.poly_reg.fit_transform(X)
    #     self.pol_reg = LinearRegression()
    #     self.pol_reg.fit(X_poly, y)

    def predict(self, value):
        value = numpy.array([value])
        B = np.reshape(value, (1, 5))
        B= self.scaler.transform(B)

        y_pred = self.pol_reg.predict(self.poly_reg.fit_transform(B))

        return y_pred[0]

# data = []
# with open("surrogate_acc.jsonl") as f:
#     for line in f:
#         data.append(json.loads(line.strip()))

# cluster = []

# for d in data:
#     temp = []
#     for c in d.values():
#         temp.append(c)
#     cluster.append(temp)

# pre = Polynomial_Regression(cluster=cluster)

# pre.test(cluster)

# print(pre.predict([45000, 8, 16, 496, 1]))

