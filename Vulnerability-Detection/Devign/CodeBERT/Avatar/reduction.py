import logging

from z3 import *
from flops import TransformerHparams

class Reduction_z3():
    def __init__(self):
        solver = Solver()

        H = Int('H')
        solver.add(H >= 16)
        solver.add(H % 16 == 0)
        solver.add(H <= 768)
        L = Int('L')
        solver.add(L >= 1)
        solver.add(L <= 12)
        V = Int('V')
        solver.add(V >= 1000)
        solver.add(V % 1000 == 0)
        solver.add(V <= 50265)
        I = Int('I')
        solver.add(I >= 16)
        solver.add(I % 16 == 0)
        solver.add(I <= 3072)
        A = Int('A')
        solver.add(A >= 1)
        solver.add(A <= 12)
        solver.add(H % A == 0)

        model = TransformerHparams(H, L, 514, V, I, A)
        params = model.get_params()

        solver.add(params*4/1e6 < 3)
        H_range = []
        L_range = []
        V_range = []
        I_range = []
        A_range = []
        logging.info("Start to reduce the seacrh space")
        while solver.check() == sat:
            model = solver.model()

            h_value = model[H].as_long()
            l_value = model[L].as_long()
            v_value = model[V].as_long()
            i_value = model[I].as_long()
            a_value = model[A].as_long()

            H_range.append(h_value)
            L_range.append(l_value)
            V_range.append(v_value)
            I_range.append(i_value)
            A_range.append(a_value)
            solver.add(Or(H > h_value, L > l_value, V > v_value, I > i_value, A > a_value))

        H_range = (min(H_range), max(H_range))
        L_range = (min(L_range), max(L_range))
        V_range = (min(V_range), max(V_range))
        I_range = (min(I_range), max(I_range))
        A_range = (min(A_range), max(A_range))
        logging.info("Finish reducing the search space")
        logging.info("H: %s", H_range)
        logging.info("L: %s", L_range)
        logging.info("V: %s", V_range)
        logging.info("I: %s", I_range)
        logging.info("A: %s", A_range)

        self.lower_bound = [H_range[0], L_range[0], V_range[0], I_range[0], A_range[0]]
        self.upper_bound = [H_range[1], L_range[1], V_range[1], I_range[1], A_range[1]]

    def get_lower_bounds(self):
        return self.lower_bound

    def get_upper_bounds(self):
        return self.upper_bound